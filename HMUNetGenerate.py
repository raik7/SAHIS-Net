from __future__ import print_function
import tensorflow as tf
import models
import os
import numpy as np
from tqdm import *
import cv2

gpus = tf.config.experimental.list_physical_devices(device_type='GPU')
tf.config.experimental.set_visible_devices(devices=gpus[0:1], device_type='GPU')
tf.config.experimental.set_memory_growth(gpus[0], True)

# path to store the images generated by HMUNet
save_path = '...\\Cholangiocarcinoma\\PreProcessed\\'

# Split the original hyperspectral image into 60 images and store them in the img_dir folder according to the file name
img_dir = '...\\Cholangiocarcinoma\\Split' 

img_dirs = next(os.walk(img_dir))[1]

img_resize = (256,192)
input_size = (192,256,1)

X1 = []
X2 = []
save_name = []

model = models.HMUNet(pretrained_weights='...\\Cholangiocarcinoma\\models\\HMUNet.h5', input_size=input_size)

for sub_dir in img_dirs:
    if sub_dir.split('-')[-1] != 'blank':
        if not os.path.exists(save_path + sub_dir):
            os.makedirs(save_path + sub_dir)
        X1 = []
        X2 = []
        save_name = []
        imgFiles = [file for file in os.listdir(img_dir + '\\' + sub_dir) if file.endswith(".png")]
        if len(imgFiles) != 0:
            for file in imgFiles:
                img_name = file.split('.')[0]
                save_name.append(img_name)

                img = cv2.imread(img_dir + '\\' + sub_dir + '\\' + file, cv2.IMREAD_GRAYSCALE)
                img = cv2.resize(img, img_resize)
                img = img / 255
                X1.append(img)

                img = cv2.imread(img_dir + '\\' + sub_dir + '\\27.png', cv2.IMREAD_GRAYSCALE)
                img = cv2.resize(img, img_resize)
                img = img / 255
                X2.append(img)

            X1 = np.array(X1)
            X1 = X1.reshape((X1.shape[0],X1.shape[1],X1.shape[2],1))

            X2 = np.array(X2)
            X2 = X2.reshape((X2.shape[0],X2.shape[1],X2.shape[2],1))

            xp = model.predict(x=[X1,X2], batch_size=1, verbose=1)

            xp = xp * 255

            for i in range(xp.shape[0]):
                img_pre = xp[i]
                img_pre = img_pre.astype('uint8')
                img_pre = cv2.resize(img_pre,(256,192))

                cv2.imwrite(save_path + sub_dir + '\\' + save_name[i]+'.png',img_pre)
                cv2.imshow('img',img_pre)
                cv2.waitKey(0)